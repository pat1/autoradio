= AutoRadio version 1.3 =
http://autoradiobc.sourceforge.net/

Radio automation software. Simple to use, starting from digital audio
files, manage on-air broadcasting over a radio-station or
web-radio. The main components are:

    * Player (Xmms/Audacious): plays all your media files and send digital sound
      to an audio device or audio server
 
    * Scheduler: real time manager for emission of special audio files
      like jingles, spots, playlist and programs; interact with player
      like supervisor User

    * inteface: WEB interface to monitor the player and scheduler and
      admin the schedules for the complete control over your station
      format

Developed with Python, Django, Dbus it works in an production enviroment


FEATURES
--------

 * manage ogg, mp3, wav and other media file format
 * it's designed as client server
 * programmable rules for schedule and period schedule
 * do not overlap schedules: anticipate, postone or delete
 * player is monitored by web interface

REQUIRES
--------

Autoradio try to work on old distribution like fedora 8 with xmms and 
cherrypy2 
On more recent ditrubution I suggest audacious version >= 1.5 and cherypy3

autoradio requires:

python >= 2.5

mutagen
muatgen version >= 1.17
http://code.google.com/p/mutagen/

you can obtain it:
http://code.google.com/p/mutagen/downloads/list
svn checkout http://mutagen.googlecode.com/svn/trunk/ mutagen
You can get also some tar and rpm from autoradio project home page 

django
http://www.djangoproject.com/
I suggest Django 1.1

cherrypy
Summary     : A pythonic, object-oriented web development framework
URL         : http://www.cherrypy.org/
Thera are incompatibility from cherrypy version 2 and 3
but autoradio works well with any version :)

configobj
Summary     : Config file reading, writing, and validation
URL         : http://www.voidspace.org.uk/python/configobj.html


Player (xmms or audacious in alternative):

  for xmms player
    pyxmms
    http://people.via.ecp.fr/~flo/index.en.xhtml

    xmms
    http://www.xmms.org/

  for audacious player version >= 1.5
    dbus-python   D-Bus Python Bindings
    http://www.freedesktop.org/software/dbus/

    audacious
    http://audacious-media-player.org/


HOW TO INSTALL
--------------

>>>>> Easy way:

You can run autoradio daemon and web server from your root software
distributed directory:

python setup.py build

change your preferred language and other preference in autoradio.cfg 

./autoradioctrl --syncdb
You have to answer to some question to setup database.

./autoradioweb run
This start autoradio webserver on port 8080

control+c to stop it
if all works well you can detach it with
./autoradioweb restart


./autoradiod run
This start daemon autoradiod (that launch xmms/audacious ) 
the player web server respond on port 8888

control+c to stop it
if all works well you can detach it with
./autoradiod restart


You have to use a browser pointing to localhost:8080


>>>>> Installed way:

you need access to root administrator user and after:

python setup.py install

choose a normal user to run the daemons, create it and 
make and go in your preferred user working writable directory

modify /etc/autoradio/autoradio-site.cfg or from the normal user
copy it in your working directory with name autoradio.cfg and modify it
specify your personal settings for installed files
if you want you can set global user setting coping configuration file in
~/.autoradio.cfg

after from root:

autoradioctrl --syncdb --changeuser
autoradioweb restart
autoradiod restart

You can run autoradiod and xmms/audacious in one host and autoradioweb
in other if you use client server DB like mysql and specify where
autoradiod is running in .cfg files

For a pubblic web server do not use django internal web server:

autoradioweb stop

and use apache instead:
http://docs.djangoproject.com/en/dev/howto/deployment/modpython/#howto-deployment-modpython
you can find an example configuration file in doc directory:
doc/apache_mod_python_example.conf

set
SERVE_STATIC=False
in /etc/autoradio-site.cfg

>>>> Pachaged way:

for Fedora and Debian/Ubuntu you have the possibility to install from
pachages in a easy way.

The pachage create the autoradio user for you and set everything in a
standard way for an easy use.

to start everythings from root user (prepend sudo command for Ubuntu):
autoradioctrl --syncdb --changeuser
autoradioweb restart
autoradiod restart

If you want you can activate monit daemon to control autoradio
daemons; an example conf file to add to monit is in:
doc/monit_autoradio_example.conf

For a pubblic web server do not use django internal web server:

autoradioweb stop

and use apache instead:
http://docs.djangoproject.com/en/dev/howto/deployment/modpython/#howto-deployment-modpython
you can find an example configuration file in doc directory:
doc/apache_mod_python_example.conf

set
SERVE_STATIC=False
in /etc/autoradio-site.cfg

HOW IT WORKS
------------

In player playlist you need a queue of media for a minumun of some hours
and for this you have to program some playlist.
Player cannot stay stopped or paused (if stopped it will be started, if paused it stay paused) for a corret work.
When time will be right jingle, programs and spots will be placed in playlist the first position after the last file inserted before by autoradiod 


CONTRIBUTED SOFTWARE
--------------------

module daemon come from http://www.livinglogic.de/Python/index.html
## Copyright 2007-2009 by LivingLogic AG, Bayreuth/Germany.
## Copyright 2007-2009 by Walter Dörwald
## OSI Approved :: MIT License

module mkplaylist come from http://bj.spline.de/mkplaylist-man.html
# Author:        Marc 'BlackJack' Rintsch
# Copyright:     (c) 2004-2009
# Licence:       GPL

module dir2ogg come from http://jak-linux.org/projects/dir2ogg/
# Copyright (C) 2007-2009 Julian Andres Klode <jak@jak-linux.org>
# Copyright (C) 2003-2006 Darren Kirby <d@badcomputer.org>
# Licence:       GPL


----------------------------------------------------------------------------

Italiano:

Autoradio è una suite di programmi che partendo da file audio digitali
permette la gestione automatica dell'emissione di una stazione
radiofonica.

queste sono le componenti:

    * Player: partendo da una playlist è in grado di gestire
      differenti formati di audio digitali per poi inviare il suono o
      a una scheda audio o a un server audio

    * Scheduler: gestisce in tempo reale l'emissione di particolari
      file o audio quali i jingles, pubblicità, playlist e programmi;
      interagisce col player controllandolo e impartendo comandi

    * L'intefaccia utente: utilizzando una interfaccia WEB pemette il
      monitoraggio dello scheduler e del player e permette la
      programmazione del palinsesto
